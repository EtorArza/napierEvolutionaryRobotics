from matplotlib import pyplot as plt
import numpy as np
from cycler import cycler
from statistics import mean,median
from pylab import polyfit
import subprocess

savefigpath = "/home/paran/Dropbox/BCAM/07_estancia_1/code/results/figures/"
experimentCsvPath="/home/paran/Dropbox/BCAM/07_estancia_1/code/experiments/nipes/parameters.csv"
experimentName = "nipes"

def get_evaluation_runtimes(MaxEvalTime):
    subprocess.run(f"python /home/paran/Dropbox/BCAM/07_estancia_1/code/scripts/utils/UpdateParameter.py -f {experimentCsvPath} -n MaxEvalTime -v {MaxEvalTime}")
    subprocess.run(f"python /home/paran/Dropbox/BCAM/07_estancia_1/code/scripts/utils/UpdateParameter.py -f {experimentCsvPath} -n maxNbrEval -v {100}")    
    exec_res=subprocess.run(f"bash launch.sh -e={experimentName}",shell=True, capture_output=True)  
    txt_res= str(exec_res.stdout).strip("'b")

    def extract_runtimes(all_lines_string: str):
        res=[]
        line_list = all_lines_string.split("\n")
        for line in line_list:
            if "update() " in line:
                res.append(float(line.strip("update() ")))
    return extract_runtimes(txt_res)


def load_bw_theme(ax: plt.Axes):
    # taken from http://olsgaard.dk/monochrome-black-white-plots-in-matplotlib.html
    # Create cycler object. Use any styling from above you please
    monochrome = (cycler('color', ['k']) * cycler('marker', [' ', '.', 'x', '^']) * cycler('linestyle', ['-', '--', ':', '-.']))
    ax.set_prop_cycle(monochrome)
    #ax.grid()
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)



max_eval_time_120 = [14.4758,5.25766,4.59861,5.27092,4.68442,10.332,3.14345,3.91669,5.23791,5.58812,16.8535,15.9301,15.6178,15.7633,16.7013,11.5992,3.81625,3.78967,3.64588,15.667,6.51727,15.8531,15.7443,10.0485,3.60934,4.43695,4.96408,4.35975,4.72157,4.48406,15.7166,16.012,16.4617,15.7241,3.90985,4.41529,3.81494,16.0893,3.28551,4.69864,4.33053,16.0911,16.241,16.1911,15.7116,3.87203,3.58704,4.71787,16.578,4.47152,4.9429,15.9077,4.70432,4.94069,16.3889,15.814,10.9984,15.8777,3.95713,4.8274,15.4066,4.89693,3.74947,4.53097,16.2423,16.4881,16.3168,15.9059,16.3028,8.5462,4.45601,16.0504,3.75153,5.07427,15.9363,15.186,15.8195,15.8936,4.67239,4.05793,18.4133,4.4761,4.7302,16.1558,16.4998,12.1519,5.07185,16.6765,16.1159,16.1352,4.47867,5.58747,4.12058,5.79309,3.42018,5.52356,4.24405,16.6078,16.1154,16.1179,4.36286,3.82021,13.3309,4.42482,4.85078,3.99668]
max_eval_time_90 = [12.5514,5.31574,4.69225,5.3261,4.76998,8.6944,3.16889,3.94907,5.3608,5.54525,13.2355,12.5776,12.8019,12.9376,12.8384,10.1723,3.8029,3.77061,3.66541,13.3129,6.89533,12.9714,13.219,9.10782,3.74206,4.59319,5.09202,4.46988,4.82846,4.63725,12.9764,13.1335,13.1551,12.8419,3.80299,4.3266,3.91064,13.2144,3.32515,4.70416,4.33118,13.3278,12.8892,13.3512,12.9722,3.82683,3.6474,4.81874,13.5772,4.64671,5.24816,13.1283,4.76465,4.8328,13.0647,13.0408,9.45488,13.6915,4.04001,5.06324,13.4775,4.95309,3.78866,4.59496,13.0212,13.4294,13.2433,12.8147,13.8308,7.69549,4.51751,13.4652,3.81626,5.12268,13.6622,13.1524,13.9812,13.4024,4.80711,4.21057,15.2398,4.60054,4.7236,13.5233,13.8653,9.82153,5.06886,13.2112,13.0996,13.5796,4.41966,5.58945,4.14322,5.79972,3.57027,5.5668,4.22458,13.5433,13.7514,13.2629,4.313,3.89031,4.85129,4.45336,5.03554,3.98207,13.5733,3.71547,3.85661]
max_eval_time_60 = [5.29013,4.59967,5.19247,4.672,7.06768,3.18359,3.89398,5.39004,5.56027,9.7779,10.2906,9.56304,9.87061,10.0317,7.77776,3.75653,3.71713,3.61606,9.83816,6.58306,5.2757,4.59691,5.19687,4.65687,7.19878,3.14097,3.9243,5.35728,5.631,9.85701,9.65869,9.66752,9.74781,9.67817,7.98034,3.77634,3.82339,3.55521,9.60806,6.54658,9.8102,5.29097,4.62347,5.23011,4.68701,7.13207,3.10854,3.97454,5.39662,5.61998,9.87867,9.88617,9.88243,9.98808,9.9833,7.90977,3.77097,3.79379]
max_eval_time_30 = [5.57325,5.26863,4.59269,5.24775,4.81136,5.58289,3.10737,3.90647,5.2735,5.53928,6.65772,6.42828,6.43262,6.46185,6.66675,6.07836,3.79332,3.7648,3.53015,6.57628,6.52661,6.74689,6.75115,5.19403,3.56559,4.42782,4.96078,4.38939,4.73226,4.50059,6.6149,6.61155,6.58565,6.71348,3.84386,4.27493,3.8781,6.82671]
max_eval_time_15 = [4.02246,5.40873,4.68981,5.29835,4.69584,4.86339,3.14834,3.997,5.27205,5.56315,4.98238,4.89604,4.89824,4.90516,4.9252,4.84914,3.71675,3.70202,3.50525,4.92178,6.46074,4.92665,4.92753,4.25053,3.54149,4.38255,4.9144,4.34935,6.8929,4.59611,5.29311,5.04995,5.08772,4.9922,3.77611,4.25007,3.81749,5.1146,3.21145,4.68785,4.34326,5.11413,5.71593,5.17649,5.37666,3.9508,3.74279,4.7751,5.1411,4.56896,5.07338,5.16877,4.70201,5.02948,5.11471,5.11112,4.6478,5.05526,3.86214,4.80917,4.97899,4.85464,3.85663,4.50711,5.01446,5.02633,4.95431,5.15896]
max_eval_time_5 = [3.06306,5.04995,4.54773,4.90486,4.33643,4.30312,2.85722,3.54275,4.93279,5.45356,4.07533,4.02029,4.01278,4.05899,4.12232,4.41845,3.58391,3.56911,3.10783,3.99601,5.49626,4.02875,4.00377,3.81756,2.95806,3.96319,4.31908,3.89183,4.15431,4.03786,4.08069,4.02484,4.08371,4.0549,3.57802,4.09506,3.55255,4.0087,2.86763,4.51683,4.05295,3.99444,4.01313,4.02157,3.96653,3.52907,2.99289,4.60215,4.00889,3.92559,4.18327,3.95346,4.32544,4.36904,4.03648,4.03412,4.02709,4.02097,3.72572,4.19743,4.01546,4.13097,3.62838,4.09289,4.01836,4.02702,4.00548,3.97219,3.96504,3.69432,3.97907,4.03772,3.62416,4.59052,3.99803,3.95959,4.0629,4.08168,4.2061,3.87667,4.78509,4.11253,4.01749,4.05009,4.05544,4.01115,4.74201,4.02563,4.09726,4.07261,3.99108,5.17013,3.88274,4.94703,3.0324,5.00506,4.04155,4.0862,4.08274,3.98968,3.83165,3.68804,4.46048,4.05644,4.1815,3.67383,3.9616,3.53612,3.54365]
max_eval_time_0_5 = [2.5551,4.78887,4.28172,4.48381,3.85748,4.04629,2.48947,3.09162,4.46856,5.34795,3.59553,3.59243,3.5579,3.68361,3.55148,4.0319,3.47149,3.5012,2.71219,3.56042,4.75799,3.52942,3.60151,3.5801,2.38539,3.53222,3.84069,3.51883,3.60291,3.73069,3.59956,3.65168,3.55974,3.56932,3.36911,3.92096,3.27225,3.5359,2.45802,4.33164,3.68641,3.53579,3.52398,3.54996,3.56568,3.39987,2.42591,4.40618,3.59337,3.52613,3.59538,3.55485,4.12356,4.07958,3.5326,3.60434,3.87597,3.56821,3.51217,3.5674,3.51382,3.44584,3.29454,3.56795,3.57416,3.61956,3.59298,3.58107,3.58773,3.59114,3.5531,3.51702,3.36763,4.3063,3.65333,3.62693,3.57266,3.5509,3.49698,3.52025,4.15754,3.63901,3.47216,3.61331,3.57609,3.71953,4.40921,3.5895,3.5918,3.55287,3.6149,4.78782]

average_runtimes = [mean(ds) for ds in [max_eval_time_0_5,max_eval_time_5,max_eval_time_15,max_eval_time_30,max_eval_time_60,max_eval_time_90,max_eval_time_120]]


fig, ax = plt.subplots(1,1)
load_bw_theme(ax)

ax.boxplot(max_eval_time_0_5, positions=[5],widths=[40])
ax.boxplot(max_eval_time_5,positions=[50],widths=[40])
ax.boxplot(max_eval_time_15,positions=[150],widths=[40])
ax.boxplot(max_eval_time_30,positions=[300],widths=[40])
ax.boxplot(max_eval_time_60,positions=[600],widths=[40])
ax.boxplot(max_eval_time_90,positions=[900],widths=[40])
ax.boxplot(max_eval_time_120,positions=[1200],widths=[40])


x = np.array([5,50,150,300,600,900,1200])
y = np.array(average_runtimes) 


m,b = polyfit(x, y, 1)
ax.plot([4,1200], [5*m+b, 1200*m+b], label=f"$f(x) = {m:2f} \cdot x  + {b:2f}$", linestyle="--")

ax.scatter([5,50,150,300,600,900,1200], average_runtimes, marker="+", label="Average")
ax.scatter([5],median(max_eval_time_0_5),marker="_", color="orange", label="Median")
ax.legend()

plt.xlabel("Number of ticks, x")
plt.ylabel("t(x) Time for evaluating a controller in seconds.")
plt.savefig(savefigpath + "runtime_of_one_controller_evaluation_with_respect_to_max_eval_time.pdf")
plt.close()
